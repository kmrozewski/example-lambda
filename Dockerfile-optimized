# Include global arg in this stage of the build
ARG FUNCTION_DIR="/function"

FROM python:3.8-alpine AS python-alpine 
RUN apk add --no-cache \
    libstdc++

FROM python-alpine as build-image
# Install aws-lambda-cpp build dependencies
RUN apk add --no-cache build-base libtool autoconf automake libexecinfo-dev make cmake libcurl
# Create function directory
ARG FUNCTION_DIR
RUN mkdir -p ${FUNCTION_DIR}
# Copy function code
COPY app.py ${FUNCTION_DIR}
# Install the runtime interface client
RUN python -m pip install --upgrade pip
RUN python -m pip install --target ${FUNCTION_DIR} awslambdaric

# Multi-stage build: grab a fresh copy of the base image
FROM python-alpine
# Include global arg in this stage of the build
ARG FUNCTION_DIR
# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}
# Copy in the build image dependencies
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}
# (Optional) Add Lambda Runtime Interface Emulator and use a script in the ENTRYPOINT for simpler local runs
ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie
COPY entry.sh /
RUN chmod 755 /usr/bin/aws-lambda-rie /entry.sh
ENTRYPOINT [ "/entry.sh" ]
CMD [ "app.handler" ]